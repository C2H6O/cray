package net.doubov.myredditclient.model;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RESULT".
 */
public class Result {

    private Long id;
    private String value;
    private Long resultSetId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ResultDao myDao;

    private ResultSet resultSet;
    private Long resultSet__resolvedKey;


    public Result() {
    }

    public Result(Long id) {
        this.id = id;
    }

    public Result(Long id, String value, Long resultSetId) {
        this.id = id;
        this.value = value;
        this.resultSetId = resultSetId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getResultDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Long getResultSetId() {
        return resultSetId;
    }

    public void setResultSetId(Long resultSetId) {
        this.resultSetId = resultSetId;
    }

    /** To-one relationship, resolved on first access. */
    public ResultSet getResultSet() {
        Long __key = this.resultSetId;
        if (resultSet__resolvedKey == null || !resultSet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResultSetDao targetDao = daoSession.getResultSetDao();
            ResultSet resultSetNew = targetDao.load(__key);
            synchronized (this) {
                resultSet = resultSetNew;
            	resultSet__resolvedKey = __key;
            }
        }
        return resultSet;
    }

    public void setResultSet(ResultSet resultSet) {
        synchronized (this) {
            this.resultSet = resultSet;
            resultSetId = resultSet == null ? null : resultSet.getId();
            resultSet__resolvedKey = resultSetId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
